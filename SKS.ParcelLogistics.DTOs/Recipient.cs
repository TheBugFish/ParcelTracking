/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using FluentValidation;
using FluentValidation.Attributes;

namespace SKS.ParcelLogistics.WebService.DTOs
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Recipient : IEquatable<Recipient>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Recipient" /> class.
        /// </summary>
        /// <param name="FirstName">FirstName (required).</param>
        /// <param name="LastName">LastName (required).</param>
        /// <param name="Street">Street (required).</param>
        /// <param name="PostalCode">PostalCode (required).</param>
        /// <param name="City">City (required).</param>
        public Recipient(string FirstName = default(string), string LastName = default(string), string Street = default(string), string PostalCode = default(string), string City = default(string))
        {
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.Street = Street;
            this.PostalCode = PostalCode;
            this.City = City;
        }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName")]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName")]
        public string LastName { get; set; }
        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name = "street")]
        public string Street { get; set; }
        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "postalCode")]
        public string PostalCode { get; set; }
        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city")]
        public string City { get; set; }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if Recipient instances are equal
        /// </summary>
        /// <param name="other">Instance of Recipient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Recipient other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) &&
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) &&
                (
                    this.Street == other.Street ||
                    this.Street != null &&
                    this.Street.Equals(other.Street)
                ) &&
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) &&
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                );
        }
    }


   /* public class RecipientValidator : AbstractValidator<Recipient>
    {
        public RecipientValidator()
        {
            RuleFor(x => x.FirstName).NotNull().Matches(@"[A-Zƒ÷‹][a-zA-Z\s-‰ˆ¸ƒ÷‹]*");
            RuleFor(x => x.LastName).NotNull().Matches(@"[A-Zƒ÷‹][a-zA-Z\s-‰ˆ¸ƒ÷‹]*");
            RuleFor(x => x.City).NotNull().Matches(@"[A-Zƒ÷‹][a-zA-Z\s-‰ˆ¸ƒ÷‹]*");
            RuleFor(x => x.PostalCode).NotNull().Matches(@"A-[0-9]{4}"); //A-0000 A-9999
            RuleFor(x => x.Street).NotNull().Matches(@"[A-Zƒ÷‹][a-zA-Z\s-ﬂ\.‰ˆ¸ƒ÷‹]*[a-zA-Z/0-9]*");
        }
    }*/
}
