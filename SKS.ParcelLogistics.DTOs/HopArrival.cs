/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using FluentValidation;
using FluentValidation.Attributes;

namespace SKS.ParcelLogistics.WebService.DTOs
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
  
    public partial class HopArrival : IEquatable<HopArrival>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="HopArrival" /> class.
        /// </summary>
        /// <param name="Code">The code of the &#x60;warehouse&#x60; or &#x60;truck&#x60;. (required).</param>
        /// <param name="DateTime">The date/time the parcel arrived at the hop. (required).</param>
        public HopArrival(string Code = default(string), DateTime? DateTime = default(DateTime?))
        {
            this.Code = Code;
            this.DateTime = DateTime;
        }

        /// <summary>
        /// The code of the &#x60;warehouse&#x60; or &#x60;truck&#x60;.
        /// </summary>
        /// <value>The code of the &#x60;warehouse&#x60; or &#x60;truck&#x60;.</value>
        [DataMember(Name = "code")]
        public string Code { get; set; }
        /// <summary>
        /// The date/time the parcel arrived at the hop.
        /// </summary>
        /// <value>The date/time the parcel arrived at the hop.</value>
        [DataMember(Name = "dateTime")]
        public DateTime? DateTime { get; set; }

  

        /// <summary>
        /// Returns true if HopArrival instances are equal
        /// </summary>
        /// <param name="other">Instance of HopArrival to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HopArrival other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) &&
                (
                    this.DateTime == other.DateTime ||
                    this.DateTime != null &&
                    this.DateTime.Equals(other.DateTime)
                );
        }
    }

   /* public class HopArrivalValidator : AbstractValidator<HopArrival>
    {
        public HopArrivalValidator()
        {
            RuleFor(x => x.Code).NotNull().Matches(@"[A-Z0-9]{8}");
            RuleFor(x => x.DateTime).NotNull();
        }
    }*/
}
