/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using FluentValidation;
using FluentValidation.Attributes;

namespace SKS.ParcelLogistics.WebService.DTOs
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Parcel : IEquatable<Parcel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Parcel" /> class.
        /// </summary>
        /// <param name="Weight">Weight (required).</param>
        /// <param name="Receipient">Receipient (required).</param>
        public Parcel(float? Weight = default(float?), Recipient Recipient = default(Recipient))
        {
            this.Weight = Weight;
            this.Recipient = Recipient;
        }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight")]
        public float? Weight { get; set; }
        /// <summary>
        /// Gets or Sets Receipient
        /// </summary>
        [DataMember(Name = "receipient")]
        public Recipient Recipient { get; set; }


        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if Parcel instances are equal
        /// </summary>
        /// <param name="other">Instance of Parcel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Parcel other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    this.Weight == other.Weight ||
                    this.Weight != null &&
                    this.Weight.Equals(other.Weight)
                ) &&
                (
                    this.Recipient == other.Recipient ||
                    this.Recipient != null &&
                    this.Recipient.Equals(other.Recipient)
                );
        }
    }

   /* public class ParcelValidator : AbstractValidator<Parcel>
    {
        public ParcelValidator()
        {
            RuleFor(x => x.Weight).NotNull().GreaterThan(0f);
            RuleFor(x => x.Recipient).NotNull();
        }
    }*/
}
