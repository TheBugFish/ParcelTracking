/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using FluentValidation;
using FluentValidation.Attributes;

namespace SKS.ParcelLogistics.WebService.DTOs
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TrackingInformation : IEquatable<TrackingInformation>
    {
        /// <summary>
        /// State of the parcel.
        /// </summary>
        /// <value>State of the parcel.</value>
        public enum StateEnum
        {
            /// <summary>
            /// Enum InTransportEnum for "InTransport"
            /// </summary>
            [EnumMember(Value = "InTransport")]
            InTransportEnum,

            /// <summary>
            /// Enum InTruckDeliveryEnum for "InTruckDelivery"
            /// </summary>
            [EnumMember(Value = "InTruckDelivery")]
            InTruckDeliveryEnum,

            /// <summary>
            /// Enum DeliveredEnum for "Delivered"
            /// </summary>
            [EnumMember(Value = "Delivered")]
            DeliveredEnum
        }
        /// <summary>
        /// State of the parcel.
        /// </summary>
        /// <value>State of the parcel.</value>
        [DataMember(Name = "state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingInformation" /> class.
        /// </summary>
        /// <param name="State">State of the parcel. (required).</param>
        /// <param name="VisitedHops">Hops visited in the past - either &#x60;warehouse&#x60; or &#x60;truck&#x60;. (required).</param>
        /// <param name="FutureHops">Hops coming up in the future - their times are estimations. (required).</param>
        public TrackingInformation(StateEnum? State = default(StateEnum?), List<HopArrival> VisitedHops = default(List<HopArrival>), List<HopArrival> FutureHops = default(List<HopArrival>))
        {
            this.State = State;
            this.VisitedHops = VisitedHops;
            this.FutureHops = FutureHops;
        }

        /// <summary>
        /// Hops visited in the past - either &#x60;warehouse&#x60; or &#x60;truck&#x60;.
        /// </summary>
        /// <value>Hops visited in the past - either &#x60;warehouse&#x60; or &#x60;truck&#x60;.</value>
        [DataMember(Name = "visitedHops")]
        public List<HopArrival> VisitedHops { get; set; }
        /// <summary>
        /// Hops coming up in the future - their times are estimations.
        /// </summary>
        /// <value>Hops coming up in the future - their times are estimations.</value>
        [DataMember(Name = "futureHops")]
        public List<HopArrival> FutureHops { get; set; }


        /// <summary>
        /// Returns true if TrackingInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of TrackingInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackingInformation other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) &&
                (
                    this.VisitedHops == other.VisitedHops ||
                    this.VisitedHops != null &&
                    this.VisitedHops.SequenceEqual(other.VisitedHops)
                ) &&
                (
                    this.FutureHops == other.FutureHops ||
                    this.FutureHops != null &&
                    this.FutureHops.SequenceEqual(other.FutureHops)
                );
        }
    }
}