/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: knor@technikum-wien.at
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using SKS.ParcelLogistics.BusinessLogic;
using SKS.ParcelLogistics.BusinessLogic.Entities;
using SKS.ParcelLogistics.BusinessLogic.Interfaces;
using SKS.ParcelLogistics.WebService.DTOs;
using System;
using System.Collections.Generic;

namespace SKS.ParcelLogistics.WebSerice.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class ParcelLogisticsController : Controller
    {
        private static readonly log4net.ILog _logger = log4net.LogManager.GetLogger(typeof(ParcelLogisticsController));

        private IBusinessLogic _businessLogic;

        public ParcelLogisticsController(IBusinessLogic businessLogic)
        {
            _businessLogic = businessLogic;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Submit a new parcel to the logistics service. </remarks>
        /// <param name="newParcel"></param>
        /// <response code="200">Successfully submitted the new parcel</response>
        /// <response code="500">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/api/parcel")]
        public virtual IActionResult ParcelPost([FromBody]Parcel newParcel)
        {
            try
            {
                var parcel = Mapper.Map<Parcel, ParcelModel>(newParcel);

                InlineResponse200 response = new InlineResponse200(_businessLogic.OnBoardParcel(parcel));
                return  Ok(response);
            }
            catch (BLException ex)
            {
                return StatusCode(500, new Error(ex.Message));
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Track a parcel with its ID. </remarks>
        /// <param name="trackingId">The tracking ID of the parcel.</param>
        /// <response code="200">Parcel exists, here&#39;s the tracking information.</response>
        /// <response code="404">Parcel does not exist with this tracking ID.</response>
        [HttpGet]
        [Route("/api/parcel/{trackingId}")]
        public virtual IActionResult ParcelTrackingIdGet([FromRoute]string trackingId)
        {
            _logger.Info("Looking for Parcel with TrackingID: " + trackingId);
            try
            {
                ParcelModel parcelModel = _businessLogic.GetParcelByCode(trackingId);
                if (parcelModel == null)
                {
                    return StatusCode(404, new Error(string.Format("Parcel not found with tracking id '{0}'!", trackingId)));
                }
                   

                TrackingInformationModel trackingInfoModel = _businessLogic.TrackParcel(parcelModel.TrackingCode);

                TrackingInformation trackingInfo = Mapper.Map<TrackingInformationModel, TrackingInformation>(trackingInfoModel);

                var response = JsonConvert.SerializeObject(trackingInfo);
                return Ok(response);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new Error(ex.Message));
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Report that a &#x60;Parcel&#x60; has arrived at a certain hop either &#x60;Warehouse&#x60; or &#x60;Truck&#x60;. </remarks>
        /// <param name="trackingId">The tracking ID of the parcel.</param>
        /// <param name="code">The &#x60;Code&#x60; of the hop (&#x60;Warehouse&#x60; or &#x60;Truck&#x60;).</param>
        /// <response code="200">Successfully reported hop.</response>
        /// <response code="500">An error occured.</response>
        [HttpPost]
        [Route("/api/parcel/{trackingId}/reportHop/{code}")]
        public virtual IActionResult ParcelTrackingIdReportHopCodePost([FromRoute]string trackingId, [FromRoute]string code)
        {
            try
            {
                if (_businessLogic.ReportParcelHop(trackingId, code))
                {
                    return StatusCode(200, new InlineResponse200("Successfully reported hop."));
                }
                else throw new Exception();
            }
            catch (Exception ex)
            {
                return StatusCode(500, new Error("An error occurred: " + ex.Message));
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Gets the hierarchy of &#x60;Warehouse&#x60; and &#x60;Truck&#x60; objects. </remarks>
        /// <response code="200">Successful response</response>
        /// <response code="404">No hierarchy loaded yet.</response>
        /// <response code="500">An error occurred loading.</response>
        [HttpGet]
        [Route("/api/warehouse")]
        public virtual IActionResult WarehouseGet()
        {
            try
            {
                var warehouse = _businessLogic.GetWarehouseHierarchy();

                if (warehouse == null)
                {
                    return StatusCode(404, new Error("No hierarchy loaded yet."));
                }
                var wh = Mapper.Map<WarehouseModel, Warehouse>(warehouse);
                var example = JsonConvert.SerializeObject(wh);

                return Ok(example);
            }
            catch (BLException ex)
            {
                return StatusCode(500, new Error(ex.Message));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create the hierarchy of &#x60;Warehouse&#x60; and &#x60;Truck&#x60; objects. </remarks>
        /// <param name="warehouseRoot"></param>
        /// <response code="200">Successfully loaded.</response>
        /// <response code="500">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/api/warehouse")]
        public virtual IActionResult WarehousePost([FromBody]Warehouse warehouseRoot)
        {
            try
            {
                var warehouse = Mapper.Map<Warehouse, WarehouseModel>(warehouseRoot);

                if (_businessLogic.ImportWarehouses(warehouse))
                {
                    return StatusCode(200, new InlineResponse200("Successfully loaded."));
                }
                else
                {
                    return StatusCode(500, new Error(string.Format("The operation failed due to an error")));
                }
            }
            catch (BLException ex)
            {
                return StatusCode(500, new Error(ex.Message));
            }
        }
    }
}
